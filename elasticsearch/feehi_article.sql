/*
Navicat MySQL Data Transfer

Source Server         : 本地
Source Server Version : 50553
Source Host           : localhost:3306
Source Database       : yiiblog

Target Server Type    : MYSQL
Target Server Version : 50553
File Encoding         : 65001

Date: 2018-02-09 23:57:51
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for feehi_article
-- ----------------------------
DROP TABLE IF EXISTS `feehi_article`;
CREATE TABLE `feehi_article` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `parent_id` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '父级id',
  `post_type` tinyint(3) unsigned NOT NULL DEFAULT '1' COMMENT '类型,1:文章;2:页面',
  `post_format` tinyint(3) unsigned NOT NULL DEFAULT '1' COMMENT '内容格式;1:html;2:md',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '发表者用户id',
  `post_status` tinyint(3) unsigned NOT NULL DEFAULT '1' COMMENT '状态;1:已发布;0:未发布;',
  `comment_status` tinyint(3) unsigned NOT NULL DEFAULT '1' COMMENT '评论状态;1:允许;0:不允许',
  `is_top` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT '是否置顶;1:置顶;0:不置顶',
  `recommended` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT '是否推荐;1:推荐;0:不推荐',
  `post_hits` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '查看数',
  `post_like` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '点赞数',
  `comment_count` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '评论数',
  `create_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `published_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '发布时间',
  `delete_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '删除时间',
  `post_title` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT 'post标题',
  `post_keywords` varchar(150) NOT NULL DEFAULT '' COMMENT 'seo keywords',
  `post_excerpt` varchar(500) NOT NULL DEFAULT '' COMMENT 'post摘要',
  `post_source` varchar(150) NOT NULL DEFAULT '' COMMENT '转载文章的来源',
  `post_content` text COMMENT '文章内容',
  `post_content_filtered` text COMMENT '处理过的文章内容',
  `more` text COMMENT '扩展属性,如缩略图;格式为json',
  PRIMARY KEY (`id`),
  KEY `type_status_date` (`post_type`,`post_status`,`create_time`,`id`),
  KEY `post_parent` (`parent_id`),
  KEY `post_author` (`user_id`),
  KEY `post_date` (`create_time`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1003 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=COMPACT COMMENT='portal应用 文章表';

-- ----------------------------
-- Records of feehi_article
-- ----------------------------
INSERT INTO `feehi_article` VALUES ('192', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言12111111', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('193', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言2132324324', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('194', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言sdfdfdsfsdfds', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('195', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言9999999999', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('196', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言8888888888', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('197', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('198', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语你好', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('199', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言钱', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('200', '0', '1', '1', '1', '1', '1', '0', '1', '10000', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('201', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('202', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('203', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('204', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('205', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('206', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('207', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('208', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('209', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('210', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('211', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('212', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('213', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('379', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('380', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('381', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('382', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('383', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('384', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('385', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('386', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('387', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('388', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('389', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('390', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('391', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('392', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('393', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('394', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('395', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('396', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('397', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('398', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('399', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('400', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('401', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('402', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('403', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('404', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('405', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('406', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('407', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('408', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('589', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('590', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('591', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('592', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('593', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('594', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('595', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('596', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('597', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('598', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('599', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('600', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('601', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('602', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('603', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('604', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('605', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('606', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('607', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('608', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('609', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('610', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('760', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('761', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('762', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('763', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('764', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('765', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('766', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('767', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('768', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('769', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('770', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('771', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('772', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('773', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('774', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('775', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('776', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('777', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('778', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('779', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('780', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('781', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('782', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('783', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('970', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('971', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('972', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('973', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('974', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('975', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('976', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('977', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('978', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('979', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('980', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('981', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('982', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('983', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('984', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('985', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('986', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('987', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('988', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('989', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('990', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('991', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('992', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('993', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('994', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('995', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('996', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('997', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('998', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('999', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('1000', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('1001', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
INSERT INTO `feehi_article` VALUES ('1002', '0', '1', '1', '1', '1', '1', '0', '1', '9999', '0', '0', '0', '0', '1515825206', '0', 'php是最好的语言', '[\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\",\"php\\u662f\\u6700\\u597d\\u7684\\u8bed\\u8a00\"]', 'php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言php是最好的语言', 'php是最好的语言', '<p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">本文将讨论更高效加载AngularJS视图的系统方法。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 视图一般原理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS视图也并不是什么特别神奇的技术，在其内部就是按普通的directive来处理的。也就是说，当一个位置需要显示view时，AngularJS会尝试使用某种方法获得其HTML模板文件的具体内容、包装成directive，执行directive的标准流程，最后添加到页面上。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426924927.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">回想一下，directive本身是不是正好也支持templateUrl属性？这就与view技术衔接上了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">这样说来，是不是视图模板也可以使用行内DOM甚至是字符串字面量值了呢？答案是肯定的！我们本来就可以使用一段行内DOM来作为view的模板。例如：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426810816.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">当然，作为一个大型的AngularJS应用程序，将所有view都放在字符串值里，或者行内DOM里是不太现实的，我们希望可以使用多个小的HTML文件来作为子模板。这样，虽然整个应用很大，但每个子模板的文件并不大，一般都是几KB的小文件，当用户点击到指定位置，需要时使用对应界面的模板时再去加载，也就显著提高了效率。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">我们可以用下图来表示“行内DOM”与“多个子模板文件”的性能对比：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426337411.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS 对视图加载的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面提到了“多个子模板文件”的模板组织方式，这本是一件很平常、很自然的工作方式而已。也正是因此，才让人们感觉AngularJS工作方式与自己的期望的一致：因为在没有使用AngularJS之前，人们在开发一个 Web应用时，页面就是这样一个个组织的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">即使在以前，我们在提到性能的时候，自然会想到“缓存”。在以前，页面与页面之间的跳转使得每个页面都是相互独立的单位，因此页面内容的缓存只能有赖于浏览器了。而今，AngularJS让所有页面子模板都在“单页应用”中加载，于是，我们在这个单页面应用内便获得了缓存页面内容的机会。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了缓存机制templateCache：只要已经加载过某个页面子模板，就会在templateCahce中缓存起来，下次从服务器加载页面模板之前，先检查templateCache，如果已有缓存则不需要从服务器上加载，直接使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426954735.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">AngularJS中内建了templateCache 机制之后，加载视图的过程变得高效而轻松，Web应用本身，以及开发者都不需要关心这一过程。不过，即使有页面内的templateCache，页面模板在初次使用时还是需要从服务器加载，因此偶尔能见到一些视觉闪烁的情况，比如标签切换、页面跳转等。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">对AngularJS templateCache的优化</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">作为一种优化手段，我们很自然能想到，既然页面能够在加载之后在templateCache起来就能提高性能，如果在应用启动之初templateCache中就有了所有页面的缓存，也就根本不需要服务器了，那么在页面需要显示时，也就基本不需要加载时间了。图可以变成这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426881975.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要实现这一目标，只需要在发布应用之前，构建额外的templates.js 文件，在其中将所有的页面模板读取出来并提前put到templateCache中，再将形成的templates.js嵌入到应用中即可在Web应用启动时就已经拥有所有页面模板内容的缓存版本了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">不过，对于大型AngularJS Web应用来说，我们很快发现一个问题：这个templates.js文件本身的体积迅速大了起来，它又会成为一个新的性能问题。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">于是，我们可以使用另一个已有的经验：“异步加载”。有了异步加载的支持，在加载templates.js 的请求还没有完成之前，可以“降级”使用AngularJS内建的机制，而一旦templates.js加载完成，就立即拥有了所有模板的缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426283307.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">理想中，templateCache最好能达到最佳的性能表现，但实际应用中，如果不加优化，templates.js文件本身的体积会令这种优化效果有所折扣，而加上异步加载 templates.js和降级到逐个加载单个htm模板文件之后，又有了一些改善。</p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">现在再来讨论一下浏览器缓存，可以结合上一节的templates.js一起来讨论了。浏览器缓存是浏览器里内置的一种缓存功能，当服务器正确配置了对htm和js文件的缓存支持时，浏览器将按指示缓存这些文件。不管是对一个个htm模板，还是对templates.js，都可能被缓存。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">也就是说，只要在服务器上正确配置，那么上一节所述的“异步 templates.js”，以及“降级的多个htm模板文件”都可以被浏览器缓存。这样，我们将加载htm模板文件和templates.js的需求都减少到第一次使用应用之时。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">但在服务器上配置缓存也需要谨慎，如果配置不当，就会出现当服务器上文件已经更新，但客户端浏览器仍在使用老的缓存版本的问题。由于AngularJS应用使用绑定表达式显示界面，因此如果程序已经更新，而视图还是老版本，那么绑定表达式很可能失效。这种情况下，轻则局部界面错乱，重则整个Web应用完全无法使用。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426533692.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">浏览器缓存原本是一个“杀手锏”，不管是只使用单个模板文件，还是使用templateCache，浏览器缓存都可以极大地改善其性能效果。但一旦缓存配置不当致使客户端浏览器里使用了错误的版本，就直接导致应用错误，更不谈性能表现了。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">要处理缓存问题也有成熟的经验可供借鉴：也就是在文件名上使用版本号，每次需要更新文件内容时，同时更改版本号，那么整个文件名也就发生变化，也就不会发生缓存版本错误问题。结合上面的论述，我们在templates.js 上添加上版本号，另一方面配置AngularJS，在加载单个htm模板文件时，也会在请求上附上版本号，即可解决这一问题。当然，我们希望在开发时，标记要使用的视图模板时，不需要指定这个需要经常变化的版本号，从而最大程度地保障开发体验，并将维护成本降到最低。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img class=\"alignnone\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426435233.jpg\" width=\"422\" height=\"147\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><h3 style=\"border: 0px; margin: 0px 0px 20px; padding: 0px; font-size: 20px; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; color: rgb(46, 46, 46); white-space: normal; background-color: rgb(255, 255, 255);\">总结</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">上面讨论了AngularJS视图各种可能的方式，分别实施的方法，以及其性能表现差异。主要值得关注的是经优化的templateCache机制，以及结合浏览器缓存的templateCache方法。总结来说，可以形成这样一个更直观的图形：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"border: 0px; margin: 0px; padding: 0px;\">经过一番努力，最终我们能够达到这样的结果：</strong></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426495633.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; list-style-position: outside; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>在应用里添加仅在生产环境才生效的策略：支持在加载视图模板文件时在文件名中添加版本号（从页面中templates.js的文件路径中分析版本号）；</p></li><li><p>开发时不需要经过改变；</p></li><li><p>发布时预读取所有模板的内容，并生成带版本号的templates.js，嵌入应用页面中；</p></li><li><p>在服务器上配置所有htm模板文件及templates.js的缓存策略为“允许缓存”；</p></li><li><p>用户首次使用应用时，集中所有网络带宽加载AngularJS基础脚；本，以及应用程序业务逻辑系统，令应用程序尽早能够使用；此时应用使用htm模板文件作为视图模板；</p></li><li><p>异步加载templates.js；加载完成之后应用开始使用页面内模板缓存；</p></li><li><p>用户再次使用应用时，从浏览器缓存中加载templates.js；</p></li><li><p>再次发布应用时，修改templates.js 文件名中的版本号，嵌入页面中。</p></li></ol><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">所以，在首次用户使用应用时，其网络加载图形就像这样：</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><img id=\"pic\" class=\"\" src=\"###~SITEURL~###/uploads/article/ueditor/php/upload/image/20160712/1468294426721265.jpg\" style=\"border: 0px; margin: auto; padding: 0px; font-size: 0px; color: transparent; vertical-align: middle; max-width: 100%; height: auto; display: block; clear: both;\"/></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">最先加载的是应用程序AngularJS框架本身，以及业务逻辑，这时候应用已经可用；此时再异步去加载templates.js文件。事实上，上面的图形即是我们实际项目中的状况，具体实现在这里就不贴了，也欢迎读者一起探讨更多的可能性。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px; font-size: 15px; color: rgb(46, 46, 46); font-family: &quot;Microsoft YaHei&quot;, 宋体, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);\">从本文的讨论不难看出，只要通过各种方法，好好管理浏览器的加载行为，形成一个系统方法，便能令视图加载的性能表现变得更好。</p><p><br/></p>', '', '{\"thumbnail\":\"webuploader\\/image\\/20180113\\/c1dfd96eea8cc2b62785275bca38ac261256e278.png\",\"photos\":[\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\",\"webuploader\\/image\\/20180113\\/c277af20f985603442a3e942f389fd0069def32e.jpg\"],\"files\":\"\"}');
